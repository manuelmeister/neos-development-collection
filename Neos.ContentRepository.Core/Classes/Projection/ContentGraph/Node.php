<?php

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

declare(strict_types=1);

namespace Neos\ContentRepository\Core\Projection\ContentGraph;

use Neos\ContentRepository\Core\SharedModel\Node\NodeAggregateId;
use Neos\ContentRepository\Core\SharedModel\Node\NodeName;
use Neos\ContentRepository\Core\DimensionSpace\OriginDimensionSpacePoint;
use Neos\ContentRepository\Core\SharedModel\Node\NodeAggregateClassification;
use Neos\ContentRepository\Core\NodeType\NodeType;
use Neos\ContentRepository\Core\NodeType\NodeTypeName;

/**
 * Main read model of the {@see ContentSubgraphInterface}.
 *
 * Immutable, Read Only. In case you want to modify it, you need
 * to create Commands and send them to ContentRepository::handle.
 *
 * The node does not have structure information, i.e. no infos
 * about its children. To f.e. fetch children, you need to fetch
 * the subgraph {@see ContentGraphInterface::getSubgraph()} via
 * $subgraphIdentity {@see Node::$subgraphIdentity}. and then
 * call findChildNodes() {@see ContentSubgraphInterface::findChildNodes()}
 * on the subgraph.
 *
 * @api Note: The constructor is not part of the public API
 */
final class Node
{
    /**
     * @internal
     */
    public function __construct(
        /**
         * With this information, you can fetch a Subgraph using {@see ContentGraphInterface::getSubgraph()}.
         */
        public readonly ContentSubgraphIdentity $subgraphIdentity,
        /**
         * NodeAggregateId (identifier) of this node
         * This is part of the node's "Read Model" identity, which is defined by:
         * - {@see $subgraphIdentity}
         * - {@see $nodeAggregateId} (this property)
         */
        public readonly NodeAggregateId $nodeAggregateId,
        /**
         * The DimensionSpacePoint the node is at home in. Usually needed to address a Node in a NodeAggregate
         * in order to update it.
         */
        public readonly OriginDimensionSpacePoint $originDimensionSpacePoint,
        public readonly NodeAggregateClassification $classification,
        public readonly NodeTypeName $nodeTypeName,
        public readonly NodeType $nodeType,
        /**
         * All property values of this node indexed by name.
         *
         * References are NOT part of this API, but can be read through
         * the subgraph {@see ContentSubgraphInterface::findReferences()}.
         *
         * You can also read the serialized properties {@see PropertyCollection::serialized()}.
         */
        public readonly PropertyCollection $properties,
        public readonly ?NodeName $nodeName,
        public readonly Timestamps $timestamps,
    ) {
    }

    /**
     * Returns the specified property, or null if it does not exist (or was set to null -> unset)
     *
     * @param string $propertyName Name of the property
     * @return mixed value of the property
     * @api
     */
    public function getProperty(string $propertyName): mixed
    {
        return $this->properties->get($propertyName);
    }

    /**
     * If this node has a property with the given name. Does NOT check the NodeType; but checks
     * for a non-NULL property value.
     *
     * @param string $propertyName
     * @return boolean
     * @api
     */
    public function hasProperty(string $propertyName): bool
    {
        return $this->properties->has($propertyName);
    }

    /**
     * Returns the node label as generated by the configured node label generator
     *
     * @return string
     */
    public function getLabel(): string
    {
        return $this->nodeType->getNodeLabelGenerator()->getLabel($this);
    }

    public function equals(Node $other): bool
    {
        return $this->subgraphIdentity->equals($other->subgraphIdentity)
            && $this->nodeAggregateId->equals($other->nodeAggregateId);
    }
}
